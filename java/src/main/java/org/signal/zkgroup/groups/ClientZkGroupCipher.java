//
// Copyright (C) 2020 Signal Messenger, LLC.
// All rights reserved.
//
// SPDX-License-Identifier: GPL-3.0-only
//

// Generated by zkgroup/codegen/codegen.py - do not edit

package org.signal.zkgroup.groups;

import java.security.SecureRandom;
import java.util.UUID;
import org.signal.zkgroup.InvalidInputException;
import org.signal.zkgroup.VerificationFailedException;
import org.signal.zkgroup.ZkGroupError;
import org.signal.zkgroup.internal.Native;
import org.signal.zkgroup.profiles.ProfileKey;
import org.signal.zkgroup.util.UUIDUtil;

public class ClientZkGroupCipher {

  private final GroupSecretParams groupSecretParams;

  public ClientZkGroupCipher(GroupSecretParams groupSecretParams) {
    this.groupSecretParams = groupSecretParams;
  }

  public UuidCiphertext encryptUuid(UUID uuid) {
    byte[] newContents = new byte[UuidCiphertext.SIZE];

    int ffi_return = Native.groupSecretParamsEncryptUuidJNI(groupSecretParams.getInternalContentsForJNI(), UUIDUtil.serialize(uuid), newContents);

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw new ZkGroupError("FFI_RETURN!=OK");
    }

    try {
      return new UuidCiphertext(newContents);
    } catch (InvalidInputException e) {
      throw new AssertionError(e);
    }

  }

  public UUID decryptUuid(UuidCiphertext uuidCiphertext) throws VerificationFailedException {
    byte[] newContents = new byte[UUIDUtil.UUID_LENGTH];

    int ffi_return = Native.groupSecretParamsDecryptUuidJNI(groupSecretParams.getInternalContentsForJNI(), uuidCiphertext.getInternalContentsForJNI(), newContents);
    if (ffi_return == Native.FFI_RETURN_INPUT_ERROR) {
      throw new VerificationFailedException();
    }

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw new ZkGroupError("FFI_RETURN!=OK");
    }

    return UUIDUtil.deserialize(newContents);
  }

  public ProfileKeyCiphertext encryptProfileKey(ProfileKey profileKey) {
    return encryptProfileKey(new SecureRandom(), profileKey);
  }

  public ProfileKeyCiphertext encryptProfileKey(SecureRandom secureRandom, ProfileKey profileKey) {
    byte[] newContents = new byte[ProfileKeyCiphertext.SIZE];
    byte[] random      = new byte[Native.RANDOM_LENGTH];

    secureRandom.nextBytes(random);

    int ffi_return = Native.groupSecretParamsEncryptProfileKeyDeterministicJNI(groupSecretParams.getInternalContentsForJNI(), random, profileKey.getInternalContentsForJNI(), newContents);

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw new ZkGroupError("FFI_RETURN!=OK");
    }

    try {
      return new ProfileKeyCiphertext(newContents);
    } catch (InvalidInputException e) {
      throw new AssertionError(e);
    }

  }

  public ProfileKey decryptProfileKey(ProfileKeyCiphertext profileKeyCiphertext) throws VerificationFailedException {
    byte[] newContents = new byte[ProfileKey.SIZE];

    int ffi_return = Native.groupSecretParamsDecryptProfileKeyJNI(groupSecretParams.getInternalContentsForJNI(), profileKeyCiphertext.getInternalContentsForJNI(), newContents);
    if (ffi_return == Native.FFI_RETURN_INPUT_ERROR) {
      throw new VerificationFailedException();
    }

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw new ZkGroupError("FFI_RETURN!=OK");
    }

    try {
      return new ProfileKey(newContents);
    } catch (InvalidInputException e) {
      throw new AssertionError(e);
    }

  }

  public byte[] encryptBlob(byte[] plaintext) {
    byte[] newContents = new byte[plaintext.length+0];

    int ffi_return = Native.groupSecretParamsEncryptBlobJNI(groupSecretParams.getInternalContentsForJNI(), plaintext, newContents);

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw new ZkGroupError("FFI_RETURN!=OK");
    }

    return newContents;
  }

  public byte[] decryptBlob(byte[] blobCiphertext) throws VerificationFailedException {
    byte[] newContents = new byte[blobCiphertext.length+0];

    int ffi_return = Native.groupSecretParamsDecryptBlobJNI(groupSecretParams.getInternalContentsForJNI(), blobCiphertext, newContents);
    if (ffi_return == Native.FFI_RETURN_INPUT_ERROR) {
      throw new VerificationFailedException();
    }

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw new ZkGroupError("FFI_RETURN!=OK");
    }

    return newContents;
  }

}

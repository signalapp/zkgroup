name: Tests

on: [push]

jobs:

  test_misc:
    name: Rust + Java + Node
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Configure git to use HTTPS
        run: git config --global url."https://${{ secrets.REPO_ACCESS_TOKEN }}:x-oauth-basic@github.com".insteadOf ssh://git@github.com

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run clippy
        run: |
          rustup component add clippy
          cargo clippy -- -D warnings

      - name: Test Rust
        run: cargo test

      - name: Test Java
        run: |
          cargo install --version=1.0.0 cargo-ndk
          rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android
          ./gradlew test
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk/
          ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk-bundle/

      - name: Read .nvmrc
        id: node_version
        working-directory: ffi/node
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '${{ steps.node_version.outputs.NODE_VERSION }}'

      - name: Test Node
        working-directory: ffi/node
        run: |
          npm --version
          node --version
          make libzkgroup
          make test

  test_ios:
    name: iOS
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup rust toolchain
        run: rustup show

      - name: Run pod lint
        # No import validation because it tries to build unsupported platforms (like 32-bit iOS).
        run: pod lib lint --verbose --platforms=ios --skip-import-validation --allow-warnings
